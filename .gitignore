¡Llena ese carrito!
Introducción
Instacart es una plataforma de entregas de comestibles donde la clientela puede registrar un pedido y hacer que se lo entreguen, similar a Uber Eats y Door Dash. El conjunto de datos que te hemos proporcionado tiene modificaciones del original. Redujimos el tamaño del conjunto para que tus cálculos se hicieran más rápido e introdujimos valores ausentes y duplicados. Tuvimos cuidado de conservar las distribuciones de los datos originales cuando hicimos los cambios.

Debes completar tres pasos. Para cada uno de ellos, escribe una breve introducción que refleje con claridad cómo pretendes resolver cada paso, y escribe párrafos explicatorios que justifiquen tus decisiones al tiempo que avanzas en tu solución. También escribe una conclusión que resuma tus hallazgos y elecciones.

Diccionario de datos
Hay cinco tablas en el conjunto de datos, y tendrás que usarlas todas para hacer el preprocesamiento de datos y el análisis exploratorio de datos. A continuación se muestra un diccionario de datos que enumera las columnas de cada tabla y describe los datos que contienen.

instacart_orders.csv: cada fila corresponde a un pedido en la aplicación Instacart.
'order_id': número de ID que identifica de manera única cada pedido.
'user_id': número de ID que identifica de manera única la cuenta de cada cliente.
'order_number': el número de veces que este cliente ha hecho un pedido.
'order_dow': día de la semana en que se hizo el pedido (0 si es domingo).
'order_hour_of_day': hora del día en que se hizo el pedido.
'days_since_prior_order': número de días transcurridos desde que este cliente hizo su pedido anterior.
products.csv: cada fila corresponde a un producto único que pueden comprar los clientes.
'product_id': número ID que identifica de manera única cada producto.
'product_name': nombre del producto.
'aisle_id': número ID que identifica de manera única cada categoría de pasillo de víveres.
'department_id': número ID que identifica de manera única cada departamento de víveres.
order_products.csv: cada fila corresponde a un artículo pedido en un pedido.
'order_id': número de ID que identifica de manera única cada pedido.
'product_id': número ID que identifica de manera única cada producto.
'add_to_cart_order': el orden secuencial en el que se añadió cada artículo en el carrito.
'reordered': 0 si el cliente nunca ha pedido este producto antes, 1 si lo ha pedido.
aisles.csv
'aisle_id': número ID que identifica de manera única cada categoría de pasillo de víveres.
'aisle': nombre del pasillo.
departments.csv
'department_id': número ID que identifica de manera única cada departamento de víveres.
'department': nombre del departamento.
Paso 1. Descripción de los datos
Lee los archivos de datos (/datasets/instacart_orders.csv, /datasets/products.csv, /datasets/aisles.csv, /datasets/departments.csv y /datasets/order_products.csv) con pd.read_csv() usando los parámetros adecuados para leer los datos correctamente. Verifica la información para cada DataFrame creado.

Plan de solución
Escribe aquí tu plan de solución para el Paso 1. Descripción de los datos.

import pandas as pd
import matplotlib.pyplot as plt


# importar librerías
df_instacart=pd.read_csv("/datasets/instacart_orders.csv", sep=";")
df_products= pd.read_csv ("/datasets/products.csv", sep=";")
df_aisles= pd.read_csv("/datasets/aisles.csv",sep=";")
df_departments= pd.read_csv("/datasets/departments.csv", sep=";")
df_order_products= pd.read_csv("/datasets/order_products.csv", sep=";") # leer conjuntos de datos en los DataFrames
df_instacart.info()
# mostrar información del DataFrame
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 478967 entries, 0 to 478966
Data columns (total 6 columns):
 #   Column                  Non-Null Count   Dtype  
---  ------                  --------------   -----  
 0   order_id                478967 non-null  int64  
 1   user_id                 478967 non-null  int64  
 2   order_number            478967 non-null  int64  
 3   order_dow               478967 non-null  int64  
 4   order_hour_of_day       478967 non-null  int64  
 5   days_since_prior_order  450148 non-null  float64
dtypes: float64(1), int64(5)
memory usage: 21.9 MB
df_products.info()# mostrar información del DataFrame
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 49694 entries, 0 to 49693
Data columns (total 4 columns):
 #   Column         Non-Null Count  Dtype 
---  ------         --------------  ----- 
 0   product_id     49694 non-null  int64 
 1   product_name   48436 non-null  object
 2   aisle_id       49694 non-null  int64 
 3   department_id  49694 non-null  int64 
dtypes: int64(3), object(1)
memory usage: 1.5+ MB
df_aisles.info()# mostrar información del DataFrame
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 134 entries, 0 to 133
Data columns (total 2 columns):
 #   Column    Non-Null Count  Dtype 
---  ------    --------------  ----- 
 0   aisle_id  134 non-null    int64 
 1   aisle     134 non-null    object
dtypes: int64(1), object(1)
memory usage: 2.2+ KB
df_departments.info()# mostrar información del DataFrame
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 21 entries, 0 to 20
Data columns (total 2 columns):
 #   Column         Non-Null Count  Dtype 
---  ------         --------------  ----- 
 0   department_id  21 non-null     int64 
 1   department     21 non-null     object
dtypes: int64(1), object(1)
memory usage: 464.0+ bytes
df_order_products.info(show_counts=True)# mostrar información del DataFrame
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 4545007 entries, 0 to 4545006
Data columns (total 4 columns):
 #   Column             Non-Null Count    Dtype  
---  ------             --------------    -----  
 0   order_id           4545007 non-null  int64  
 1   product_id         4545007 non-null  int64  
 2   add_to_cart_order  4544171 non-null  float64
 3   reordered          4545007 non-null  int64  
dtypes: float64(1), int64(3)
memory usage: 138.7 MB
Conclusiones
Escribe aquí tus conclusiones intermedias sobre el Paso 1. Descripción de los datos. Las conclusiones que saco de la informacion de los DF en general, todos tienen como tipo de dato solo cadenas, hay tipos de datos que debn cambiarse por ejemplo las columnas que tienen fecha y horas, al igual que columnas tienen tipo de datos flotante cuando podrian ser enteros. se logra ver valores ausentes en algunas columnas tambien.

Paso 2. Preprocesamiento de los datos
Preprocesa los datos de la siguiente manera:

Verifica y corrige los tipos de datos (por ejemplo, asegúrate de que las columnas de ID sean números enteros).
Identifica y completa los valores ausentes.
Identifica y elimina los valores duplicados.
Asegúrate de explicar qué tipos de valores ausentes y duplicados encontraste, cómo los completaste o eliminaste y por qué usaste esos métodos. ¿Por qué crees que estos valores ausentes y duplicados pueden haber estado presentes en el conjunto de datos?

Plan de solución
Escribe aquí tu plan para el Paso 2. Preprocesamiento de los datos.

Encuentra y elimina los valores duplicados (y describe cómo tomaste tus decisiones).
instacart_orders data frame
df_instacart[df_instacart.duplicated()] # Revisa si hay pedidos duplicados
order_id	user_id	order_number	order_dow	order_hour_of_day	days_since_prior_order
145574	794638	50898	24	3	2	2.0
223105	2160484	107525	16	3	2	30.0
230807	1918001	188546	14	3	2	16.0
266232	1782114	106752	1	3	2	NaN
273805	1112182	202304	84	3	2	6.0
284038	2845099	31189	11	3	2	7.0
311713	1021560	53767	3	3	2	9.0
321100	408114	68324	4	3	2	18.0
323900	1919531	191501	32	3	2	7.0
345917	2232988	82565	1	3	2	NaN
371905	391768	57671	19	3	2	10.0
394347	467134	63189	21	3	2	2.0
411408	1286742	183220	48	3	2	4.0
415163	2282673	86751	49	3	2	2.0
441599	2125197	14050	48	3	2	3.0
¿Tienes líneas duplicadas? Si sí, ¿qué tienen en común? tienen en comun que las 15 filas que estan duplicadas fueron pedidos realizados el dia miercoles a las 2am

# Basándote en tus hallazgos,

df_miercoles = df_instacart[df_instacart['order_dow'] == 3]

df_2am = df_miercoles[df_miercoles['order_hour_of_day'] == 2] # Verifica todos los pedidos que se hicieron el miércoles a las 2:00 a.m.
print(df_2am)
        order_id  user_id  order_number  order_dow  order_hour_of_day  \
4838     2766110   162084            41          3                  2   
5156     2190225   138285            18          3                  2   
15506     553049    58599            13          3                  2   
18420     382357   120200            19          3                  2   
24691     690242    77357             2          3                  2   
...          ...      ...           ...        ...                ...   
457013   3384021    14881             6          3                  2   
458816    910166   164782            18          3                  2   
459635   1680532   106435             6          3                  2   
468324    222962    54979            59          3                  2   
477526   2592344    46860            38          3                  2   

        days_since_prior_order  
4838                      16.0  
5156                      11.0  
15506                      7.0  
18420                     11.0  
24691                      9.0  
...                        ...  
457013                    30.0  
458816                     4.0  
459635                    21.0  
468324                     3.0  
477526                     3.0  

[121 rows x 6 columns]
¿Qué sugiere este resultado? Sugiere que no todos los pedidos del miercoles a las 2am son duplicados ya que hay 121 pedidos a ese dia a esa misma hora, de los cuales solo 15 son duplicados.

df_instacart=df_instacart.drop_duplicates() # Elimina los pedidos duplicados
df_instacart.duplicated().value_counts()# Vuelve a verificar si hay filas duplicadas
False    478952
dtype: int64
df_instacart[df_instacart.duplicated(subset="order_id")]# Vuelve a verificar únicamente si hay IDs duplicados de pedidos
order_id	user_id	order_number	order_dow	order_hour_of_day	days_since_prior_order
Describe brevemente tus hallazgos y lo que hiciste con ellos. ya no existen duplicados en el dataframe completo y tampoco hay en la columna order_id

products data frame
print(df_products.duplicated().value_counts())# Verifica si hay filas totalmente duplicadas
False    49694
dtype: int64
departamentos_duplicados = df_products[df_products['department_id'].duplicated()] # Revisa únicamente si hay ID de departamentos duplicados
print(departamentos_duplicados)
       product_id                                     product_name  aisle_id  \
4               5                        Green Chile Anytime Sauce         5   
6               7                   Pure Coconut Water With Orange        98   
7               8                Cut Russet Potatoes Steam N' Mash       116   
9              10   Sparkling Orange Juice & Prickly Pear Beverage       115   
10             11                                Peach Mango Juice        31   
...           ...                                              ...       ...   
49689       49690                    HIGH PERFORMANCE ENERGY DRINK        64   
49690       49691                    ORIGINAL PANCAKE & WAFFLE MIX       130   
49691       49692  ORGANIC INSTANT OATMEAL LIGHT MAPLE BROWN SUGAR       130   
49692       49693                           SPRING WATER BODY WASH       127   
49693       49694                          BURRITO- STEAK & CHEESE        38   

       department_id  
4                 13  
6                  7  
7                  1  
9                  7  
10                 7  
...              ...  
49689              7  
49690             14  
49691             14  
49692             11  
49693              1  

[49673 rows x 4 columns]
productos_duplicados = df_products[df_products['product_name'].duplicated()]# Revisa únicamente si hay nombres duplicados de productos (convierte los nombres a letras mayúsculas para compararlos mejor)
df_products['product_name'] = df_products['product_name'].str.upper()
print(productos_duplicados)
       product_id product_name  aisle_id  department_id
71             72          NaN       100             21
109           110          NaN       100             21
296           297          NaN       100             21
416           417          NaN       100             21
436           437          NaN       100             21
...           ...          ...       ...            ...
49552       49553          NaN       100             21
49574       49575          NaN       100             21
49640       49641          NaN       100             21
49663       49664          NaN       100             21
49668       49669          NaN       100             21

[1257 rows x 4 columns]
 # Revisa si hay nombres duplicados de productos no faltante
productos_duplicados_no_faltantes = df_products[~(df_products['product_name'].isna())] 
print(productos_duplicados_no_faltantes)
 
       product_id                                       product_name  \
0               1                         CHOCOLATE SANDWICH COOKIES   
1               2                                   ALL-SEASONS SALT   
2               3               ROBUST GOLDEN UNSWEETENED OOLONG TEA   
3               4  SMART ONES CLASSIC FAVORITES MINI RIGATONI WIT...   
4               5                          GREEN CHILE ANYTIME SAUCE   
...           ...                                                ...   
49689       49690                      HIGH PERFORMANCE ENERGY DRINK   
49690       49691                      ORIGINAL PANCAKE & WAFFLE MIX   
49691       49692    ORGANIC INSTANT OATMEAL LIGHT MAPLE BROWN SUGAR   
49692       49693                             SPRING WATER BODY WASH   
49693       49694                            BURRITO- STEAK & CHEESE   

       aisle_id  department_id  
0            61             19  
1           104             13  
2            94              7  
3            38              1  
4             5             13  
...         ...            ...  
49689        64              7  
49690       130             14  
49691       130             14  
49692       127             11  
49693        38              1  

[48436 rows x 4 columns]
print(df_products["product_name"].duplicated().value_counts())
False    48333
True      1361
Name: product_name, dtype: int64
Describe brevemente tus hallazgos y lo que hiciste con ellos. Los duplicados que hay coinciden en la columna aisle_id

departments data frame
df_departments.duplicated().value_counts() # Revisa si hay filas totalmente duplicadas
False    21
dtype: int64
id_duplicados = df_departments[df_departments['department_id'].duplicated()]
# Revisa únicamente si hay IDs duplicadas de productos 
print(id_duplicados)
Empty DataFrame
Columns: [department_id, department]
Index: []
Describe brevemente tus hallazgos y lo que hiciste con ellos. No hay duplicados este DF es muy corto por ende controlar que sus datos estas ordenados y sin duplicados es sencillo

aisles data frame
df_aisles[df_aisles.duplicated()]# Revisa si hay filas totalmente duplicadas
aisle_id	aisle
df_aisles[df_aisles.duplicated(subset='aisle_id')]# Revisa únicamente si hay IDs duplicadas de productos
aisle_id	aisle
Describe brevemente tus hallazgos y lo que hiciste con ellos. Esta data es prolija

order_products data frame
df_order_products[df_order_products.duplicated()]# Revisa si hay filas totalmente duplicadas
order_id	product_id	add_to_cart_order	reordered
print(df_order_products.value_counts())# Vuelve a verificar si hay cualquier otro duplicado engañoso
order_id  product_id  add_to_cart_order  reordered
4         10054       5.0                1            1
2277733   35233       5.0                1            1
2277734   15233       4.0                1            1
          11471       2.0                1            1
          6374        3.0                1            1
                                                     ..
1145037   26790       21.0               1            1
          27767       10.0               1            1
          32086       16.0               0            1
          33572       5.0                1            1
3421079   30136       1.0                0            1
Length: 4544171, dtype: int64
Describe brevemente tus hallazgos y lo que hiciste con ellos. No hay duplicados, esta lista de dados es tan corta que es facil de controlar

Encuentra y elimina los valores ausentes
Al trabajar con valores duplicados, pudimos observar que también nos falta investigar valores ausentes:

La columna 'product_name' de la tabla products.
La columna 'days_since_prior_order' de la tabla orders.
La columna 'add_to_cart_order' de la tabla order_productos.
products data frame
print(df_products["product_name"].isna().sum())# Encuentra los valores ausentes en la columna 'product_name'
1258
Describe brevemente cuáles son tus hallazgos. Son los valores que figuran como duplicados. se deben modificar los valores ausentes

filtro_products = df_products[(df_products['product_name'].isna()) & (df_products['aisle_id'] == 100)] #  ¿Todos los nombres de productos ausentes están relacionados con el pasillo con ID 100?
print(filtro_products)
       product_id product_name  aisle_id  department_id
37             38          NaN       100             21
71             72          NaN       100             21
109           110          NaN       100             21
296           297          NaN       100             21
416           417          NaN       100             21
...           ...          ...       ...            ...
49552       49553          NaN       100             21
49574       49575          NaN       100             21
49640       49641          NaN       100             21
49663       49664          NaN       100             21
49668       49669          NaN       100             21

[1258 rows x 4 columns]
Describe brevemente cuáles son tus hallazgos. tienen en comun los valores ausentes con las columnas aisle_id y deparment_id

segundo_filtro= df_products[(df_products['product_name'].isna()) & (df_products['department_id'] == 21)]# ¿Todos los nombres de productos ausentes están relacionados con el departamento con ID 21?
print(segundo_filtro)
       product_id product_name  aisle_id  department_id
37             38          NaN       100             21
71             72          NaN       100             21
109           110          NaN       100             21
296           297          NaN       100             21
416           417          NaN       100             21
...           ...          ...       ...            ...
49552       49553          NaN       100             21
49574       49575          NaN       100             21
49640       49641          NaN       100             21
49663       49664          NaN       100             21
49668       49669          NaN       100             21

[1258 rows x 4 columns]
Describe brevemente cuáles son tus hallazgos. La conclusion de este hallazgo, es que todos los valores ausentes pertenecen al número ID que identifica el pasillo de víveres numero 100 y el número ID que identifica el departamento de víveres 21

tercer_filtro = df_products[(df_products['aisle_id'] == 100) & (df_products['department_id'] == 21)] # Usa las tablas department y aisle para revisar los datos del pasillo con ID 100 y el departamento con ID 21.
print(tercer_filtro)
       product_id product_name  aisle_id  department_id
37             38          NaN       100             21
71             72          NaN       100             21
109           110          NaN       100             21
296           297          NaN       100             21
416           417          NaN       100             21
...           ...          ...       ...            ...
49552       49553          NaN       100             21
49574       49575          NaN       100             21
49640       49641          NaN       100             21
49663       49664          NaN       100             21
49668       49669          NaN       100             21

[1258 rows x 4 columns]
Describe brevemente cuáles son tus hallazgos.

df_products['product_name'].fillna('Unknown', inplace=True)
df_products.info()# Completa los nombres de productos ausentes con 'Unknown'
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 49694 entries, 0 to 49693
Data columns (total 4 columns):
 #   Column         Non-Null Count  Dtype 
---  ------         --------------  ----- 
 0   product_id     49694 non-null  int64 
 1   product_name   49694 non-null  object
 2   aisle_id       49694 non-null  int64 
 3   department_id  49694 non-null  int64 
dtypes: int64(3), object(1)
memory usage: 1.5+ MB
Describe brevemente tus hallazgos y lo que hiciste con ellos. Con esta modificacion se solventa el inconveniente con los valores ausentes

orders data frame
print(df_instacart.isna().sum()) # Encuentra los valores ausentes
order_id                      0
user_id                       0
order_number                  0
order_dow                     0
order_hour_of_day             0
days_since_prior_order    28817
dtype: int64
# ¿Hay algún valor ausente que no sea el primer pedido del cliente?
Describe brevemente tus hallazgos y lo que hiciste con ellos. No hay ningun valor ausente, excepto los primeros pedidos

order_products data frame
print(df_order_products.isna().sum())# Encuentra los valores ausentes
order_id               0
product_id             0
add_to_cart_order    836
reordered              0
dtype: int64
minimo = df_order_products["add_to_cart_order"].min()# ¿Cuáles son los valores mínimos y máximos en esta columna?
maximo = df_order_products["add_to_cart_order"].max()
print(minimo, 
      maximo)
1.0 64.0
Describe brevemente cuáles son tus hallazgos. el valor minimo de articulos agregados al carrito es uno y maximo 64 productos

ids_ausentes = df_order_products[(df_order_products["add_to_cart_order"].isna()) & ~(df_order_products["order_id"].isna())]
# Guarda todas las IDs de pedidos que tengan un valor ausente en 'add_to_cart_order'
print(ids_ausentes)
         order_id  product_id  add_to_cart_order  reordered
737       2449164        5068                NaN          0
9926      1968313       43867                NaN          0
14394     2926893       11688                NaN          0
16418     1717990        4142                NaN          0
30114     1959075       42828                NaN          1
...           ...         ...                ...        ...
4505662   1800005        7411                NaN          0
4511400   1633337         260                NaN          0
4517562    404157        9517                NaN          0
4534112   1673227       17835                NaN          0
4535739   1832957       17949                NaN          1

[836 rows x 4 columns]
pedidos_con_valores_ausentes = df_order_products.isna().sum()
pedidos_con_mas_de_64_productos = pedidos_con_valores_ausentes.count() > 64

print(f" ¿Todos los pedidos con valores ausentes tienen más de 64 productos? {pedidos_con_mas_de_64_productos}")
# ¿Todos los pedidos con valores ausentes tienen más de 64 productos?

valores_ausentes = df_order_products["order_id"].isnull().sum()
print(f"Hay {valores_ausentes} datos ausentes")
# Agrupa todos los pedidos con datos ausentes por su ID de pedido.

cantidad_productos_por_pedido = df_order_products.groupby("order_id")['product_id'].sum()
print(f"La cantidad minima de productos por pedido es {cantidad_productos_por_pedido.min()}")
# Cuenta el número de 'product_id' en cada pedido y revisa el valor mínimo del conteo.
 ¿Todos los pedidos con valores ausentes tienen más de 64 productos? False
Hay 0 datos ausentes
La cantidad minima de productos por pedido es 1
Describe brevemente cuáles son tus hallazgos.

df_order_products['add_to_cart_order'].fillna(999, inplace=True)# Remplaza los valores ausentes en la columna 'add_to_cart? con 999 y convierte la columna al tipo entero.
df_order_products['add_to_cart_order'] = df_order_products['add_to_cart_order'].astype(int)
print(df_order_products.sample(20))
         order_id  product_id  add_to_cart_order  reordered
1880377   1839430       35968                 25          0
15101     2937748        5460                  3          0
3679914   2949363        4962                  5          1
4358976   2973425       29015                 18          0
2798065   2623847       38444                 26          1
656501    2564251        8833                  3          1
2951471   1585274       21903                  9          0
3820748    771428       21903                 11          1
620775    1516241        7681                  2          1
3205007    248729       43352                  2          1
2133557    808839       41549                  1          1
3724643   3160685       15872                  8          1
3722841    350634       31288                  8          1
748926    3340976       36186                  7          0
860579     303474       45007                 20          1
3706293    521316       24852                 21          0
4538288   1895267       25890                  4          0
3360160    759400        4809                 10          1
2471166   2432950       12432                 13          0
1856502    229526       12817                  3          1
Describe brevemente tus hallazgos y lo que hiciste con ellos.

Conclusiones
Escribe aquí tus conclusiones intermedias sobre el Paso 2. Preprocesamiento de los datos

Paso 3. Análisis de los datos
Una vez los datos estén procesados y listos, haz el siguiente análisis:

[A] Fácil (deben completarse todos para aprobar)
Verifica que los valores en las columnas 'order_hour_of_day' y 'order_dow' en la tabla orders sean razonables (es decir, 'order_hour_of_day' oscile entre 0 y 23 y 'order_dow' oscile entre 0 y 6).
Crea un gráfico que muestre el número de personas que hacen pedidos dependiendo de la hora del día.
Crea un gráfico que muestre qué día de la semana la gente hace sus compras.
Crea un gráfico que muestre el tiempo que la gente espera hasta hacer su siguiente pedido, y comenta sobre los valores mínimos y máximos.
[A1] Verifica que los valores sean sensibles
print(df_instacart['order_hour_of_day'].unique())
print(df_instacart['order_dow'].unique())
[13 12 19 20 11  8 18 15 16  9 22 10  0 14 17  1  7  6  2 21  3 23  5  4]
[6 5 0 4 3 1 2]
Escribe aquí tus conclusiones

[A2] Para cada hora del día, ¿cuántas personas hacen órdenes?
grp= df_instacart.groupby('order_hour_of_day')['order_number'].count()
print(grp)
order_hour_of_day
0      3180
1      1763
2       989
3       770
4       765
5      1371
6      4215
7     13043
8     25024
9     35896
10    40578
11    40032
12    38034
13    39007
14    39631
15    39789
16    38112
17    31930
18    25510
19    19547
20    14624
21    11019
22     8512
23     5611
Name: order_number, dtype: int64
grp.plot(kind='bar')
plt.xlabel('Hora del día')
plt.xlim([0,23]),
plt.ylabel('Cantidad de pedidos')
plt.title('Cantidad de pedidos por hora')
plt.show()
No description has been provided for this image
Escribe aquí tus conclusiones. La mayoría de los pedidos se realizan entre las 9 a. m. y las 4 p. m., con un pico a las 10 a. m.

[A3] ¿Qué día de la semana compran víveres las personas?
grp_viveres=df_instacart.groupby('order_dow')['order_number'].count()
grp_viveres.plot(kind='bar')
plt.xlabel('Dia de semana')
plt.xlim([0,6]),
plt.ylabel('Cantidad de pedidos')
plt.title('Cantidad de pedidos por dia')
plt.show()
No description has been provided for this image
Escribe aquí tus conclusiones. Los domingos son el día más popular para hacer pedidos, seguidos de los sábados.

[A4] ¿Cuánto tiempo esperan las personas hasta hacer otro pedido? Comenta sobre los valores mínimos y máximos.
df_instacart['tiempo_espera'] = df_instacart['days_since_prior_order'].fillna(0)
df_instacart['tiempo_espera'].plot(kind='hist', bins=20, title='Distribución del tiempo de espera entre pedidos')
plt.xlabel('Días de espera')
plt.ylabel('Frecuencia')
plt.show()
minimo_tiempo=df_instacart['tiempo_espera'].min()
maximo_tiempo=df_instacart['tiempo_espera'].max()
promedio= minimo_tiempo + maximo_tiempo / 2
print(promedio)
No description has been provided for this image
15.0
Escribe aquí tus conclusiones. El tiempo promedio de espera entre pedidos es de 3,8 días, con un mínimo de 0 días y un máximo de 30 días.

[B] Intermedio (deben completarse todos para aprobar)
¿Existe alguna diferencia entre las distribuciones 'order_hour_of_day' de los miércoles y los sábados? Traza gráficos de barra de 'order_hour_of_day' para ambos días en la misma figura y describe las diferencias que observes.
Grafica la distribución para el número de órdenes que hacen los clientes (es decir, cuántos clientes hicieron solo 1 pedido, cuántos hicieron 2, cuántos 3, y así sucesivamente...).
¿Cuáles son los 20 principales productos que se piden con más frecuencia (muestra su identificación y nombre)?
[B1] Diferencia entre miércoles y sábados para 'order_hour_of_day'. Traza gráficos de barra para los dos días y describe las diferencias que veas.
df_instacart['order_dow'] = df_instacart['order_dow'].astype(str)
miercoles = df_instacart[df_instacart['order_dow'] == '3']
sabado = df_instacart[df_instacart['order_dow'] == '6']
miercoles_agrupado = miercoles.groupby('order_hour_of_day')['order_id'].count()
sabado_agrupado = sabado.groupby('order_hour_of_day')['order_id'].count()

colores = ['blue', 'orange']

miercoles_agrupado.plot(kind='bar', color= colores[0], label='Miércoles', alpha=0.5)
sabado_agrupado.plot(kind='bar', color=colores[1], label='Sábado', alpha=0.3)

plt.xlabel('Hora del día (0-23)')
plt.ylabel('Número de pedidos')
plt.title('Distribución de pedidos por hora del día (Miércoles vs Sábado)')
plt.legend()
plt.show()
No description has been provided for this image
 
Escribe aquí tus conclusiones. Los miércoles tienen una distribución más uniforme de pedidos a lo largo del día en comparación con los sábados, que muestran un pico más pronunciado en la tarde

[B2] ¿Cuál es la distribución para el número de pedidos por cliente?
pedidos_por_cliente= df_instacart.groupby('user_id')['order_id'].agg("count")
print(pedidos_por_cliente)
user_id
2         2
4         2
5         1
6         2
7         2
         ..
206203    1
206206    7
206207    5
206208    9
206209    2
Name: order_id, Length: 157437, dtype: int64
pedidos_por_cliente.plot(kind='hist', bins=10, title='Distribución de pedidos por cliente')
plt.xlabel('Número de pedidos')
plt.ylabel('clientes')

plt.show()
No description has been provided for this image
Escribe aquí tus conclusiones. La mayoría de los clientes realizan solo uno o tres pedidos, mientras que un pequeño porcentaje realiza muchos pedidos.

[B3] ¿Cuáles son los 20 productos más populares (muestra su ID y nombre)?
fusion = df_products.merge(df_order_products, on="product_id", how="left")
print(fusion)
         product_id                product_name  aisle_id  department_id  \
0                 1  CHOCOLATE SANDWICH COOKIES        61             19   
1                 1  CHOCOLATE SANDWICH COOKIES        61             19   
2                 1  CHOCOLATE SANDWICH COOKIES        61             19   
3                 1  CHOCOLATE SANDWICH COOKIES        61             19   
4                 1  CHOCOLATE SANDWICH COOKIES        61             19   
...             ...                         ...       ...            ...   
4549123       49694     BURRITO- STEAK & CHEESE        38              1   
4549124       49694     BURRITO- STEAK & CHEESE        38              1   
4549125       49694     BURRITO- STEAK & CHEESE        38              1   
4549126       49694     BURRITO- STEAK & CHEESE        38              1   
4549127       49694     BURRITO- STEAK & CHEESE        38              1   

          order_id  add_to_cart_order  reordered  
0        1104373.0               11.0        1.0  
1        1774977.0                4.0        1.0  
2         652770.0               10.0        0.0  
3        1000035.0                6.0        1.0  
4        1679949.0                9.0        0.0  
...            ...                ...        ...  
4549123  3034802.0               10.0        0.0  
4549124  3175081.0                3.0        0.0  
4549125   694132.0                2.0        0.0  
4549126  2843165.0                5.0        0.0  
4549127  2077154.0               12.0        0.0  

[4549128 rows x 7 columns]
productos_mas_populares = fusion.groupby('product_id')['product_name'].sum().sort_values(ascending=False)
print(productos_mas_populares.head(20))
product_id
45316    \"MOKACCINO\" MILK + BLUE BOTTLE COFFEE CHOCOL...
25917    \"MIES VANILLA ROHE\" ICE CREAM BARS\"MIES VAN...
44344    \"LOUIS BA-KAHN\" CHOCOLATE CHIP COOKIE & BROW...
13817    \"IM PEI-NUT BUTTER\" DOUBLE CHOCOLATE COOKIE ...
10559    \"DARN GOOD\" CHILI MIX\"DARN GOOD\" CHILI MIX...
34207    \"CONSTANT COMMENT\" GREEN TEA BLEND TEA BAGS\...
483      \"CONSTANT COMMENT\" DECAFFEINATED BLACK TEA B...
23566    \"CONSTANT COMMENT\" BLACK TEA\"CONSTANT COMME...
26001    ZZZQUIL VANILLA CHERRY NIGHTTIME LIQUID SLEEP ...
36498    ZZZQUIL NIGHTTIME SLEEP-AID LIQUICAPSZZZQUIL N...
21623    ZZZQUIL NIGHTTIME LIQUID SLEEP-AID TWIN PACKZZ...
7972     ZZZQUIL LIQUID WARMING BERRY FLAVOR SLEEP-AIDZ...
49360    ZZZQUIL ALCOHOL-FREE NIGHTTIME LIQUID SLEEP AI...
28163                    ZYFLAMEND WHOLE BODY LIQUID VCAPS
38776                                 ZYFLAMEND WHOLE BODY
48209         ZUZU LUXE ONYX MASCARAZUZU LUXE ONYX MASCARA
15990    ZUCCHINI- SPINACH & BANANA BLEND VEGGIES ON-TH...
35545                            ZUCCHINI- CARROTS & ONION
49381    ZUCCHINI SQUASHZUCCHINI SQUASHZUCCHINI SQUASHZ...
1929     ZUCCHINI SQUASH- BABY COURGETTEZUCCHINI SQUASH...
Name: product_name, dtype: object
agg = {"add_to_cart_order": "sum"}
grp = fusion.groupby(["product_id","product_name"])
print(grp.agg(agg).head(20))
                                                               add_to_cart_order
product_id product_name                                                         
1          CHOCOLATE SANDWICH COOKIES                                     1580.0
2          ALL-SEASONS SALT                                                 96.0
3          ROBUST GOLDEN UNSWEETENED OOLONG TEA                            292.0
4          SMART ONES CLASSIC FAVORITES MINI RIGATONI WITH...              483.0
5          GREEN CHILE ANYTIME SAUCE                                         0.0
6          DRY NOSE OIL                                                      0.0
7          PURE COCONUT WATER WITH ORANGE                                    8.0
8          CUT RUSSET POTATOES STEAM N' MASH                               151.0
9          LIGHT STRAWBERRY BLUEBERRY YOGURT                               148.0
10         SPARKLING ORANGE JUICE & PRICKLY PEAR BEVERAGE                 3925.0
11         PEACH MANGO JUICE                                               100.0
12         CHOCOLATE FUDGE LAYER CAKE                                      361.0
13         SALINE NASAL MIST                                                17.0
14         FRESH SCENT DISHWASHER CLEANER                                   19.0
15         OVERNIGHT DIAPERS SIZE 6                                          0.0
16         MINT CHOCOLATE FLAVORED SYRUP                                     0.0
17         RENDERED DUCK FAT                                                22.0
18         PIZZA FOR ONE SUPREMA  FROZEN PIZZA                             113.0
19         GLUTEN FREE QUINOA THREE CHEESE & MUSHROOM BLEND                 25.0
20         POMEGRANATE CRANBERRY & ALOE VERA ENRICH DRINK                    0.0
Escribe aquí tus conclusiones. Los 20 productos más pedidos son principalmente alimentos básicos y artículos de despensa

[C] Difícil (deben completarse todos para aprobar)
¿Cuántos artículos suelen comprar las personas en un pedido? ¿Cómo es la distribución?
¿Cuáles son los 20 principales artículos que vuelven a pedirse con mayor frecuencia (muestra sus nombres e IDs de los productos)?
Para cada producto, ¿cuál es la tasa de repetición del pedido (número de repeticiones de pedido/total de pedidos?
Para cada cliente, ¿qué proporción de los productos que pidió ya los había pedido? Calcula la tasa de repetición de pedido para cada usuario en lugar de para cada producto.
¿Cuáles son los 20 principales artículos que la gente pone primero en sus carritos (muestra las IDs de los productos, sus nombres, y el número de veces en que fueron el primer artículo en añadirse al carrito)?
[C1] ¿Cuántos artículos compran normalmente las personas en un pedido? ¿Cómo es la distribución?
fusion = df_instacart.merge(df_order_products, on="order_id", how="left")
print(fusion)
         order_id  user_id  order_number order_dow  order_hour_of_day  \
0         1515936   183418            11         6                 13   
1         1515936   183418            11         6                 13   
2         1515936   183418            11         6                 13   
3         1515936   183418            11         6                 13   
4         1515936   183418            11         6                 13   
...           ...      ...           ...       ...                ...   
4573908   2071924     1730            18         1                 14   
4573909   2071924     1730            18         1                 14   
4573910   2071924     1730            18         1                 14   
4573911   2071924     1730            18         1                 14   
4573912   2071924     1730            18         1                 14   

         days_since_prior_order  tiempo_espera  product_id  add_to_cart_order  \
0                          30.0           30.0     19048.0                1.0   
1                          30.0           30.0     47766.0                3.0   
2                          30.0           30.0     45066.0                9.0   
3                          30.0           30.0     24082.0               11.0   
4                          30.0           30.0     24363.0                4.0   
...                         ...            ...         ...                ...   
4573908                    15.0           15.0      1503.0               17.0   
4573909                    15.0           15.0      4778.0               12.0   
4573910                    15.0           15.0     11512.0                1.0   
4573911                    15.0           15.0      4920.0                6.0   
4573912                    15.0           15.0     17678.0                4.0   

         reordered  
0              1.0  
1              1.0  
2              0.0  
3              0.0  
4              0.0  
...            ...  
4573908        0.0  
4573909        1.0  
4573910        1.0  
4573911        1.0  
4573912        1.0  

[4573913 rows x 10 columns]
articulos_por_pedido = fusion.groupby('order_id')['order_number'].sum()
promedio_articulos_pedido = articulos_por_pedido.mean()
print(promedio_articulos_pedido)
163.5810102056156
articulos_por_pedido.hist()
plt.xlabel("clientes")
plt.ylabel("cantidad de pedidos")
plt.xlim([0,1500])
plt.title("articulos que normalmente compran")
Text(0.5, 1.0, 'articulos que normalmente compran')
No description has been provided for this image
Escribe aquí tus conclusiones. Los clientes suelen comprar de 6 a 7 artículos por pedido, con una distribución que muestra una tendencia hacia pedidos más pequeños

[C2] ¿Cuáles son los 20 principales artículos que vuelven a pedirse con mayor frecuencia (muestra sus nombres e IDs de los productos)?
merge = df_products.merge(df_order_products, on="product_id")
print(merge)
         product_id                product_name  aisle_id  department_id  \
0                 1  CHOCOLATE SANDWICH COOKIES        61             19   
1                 1  CHOCOLATE SANDWICH COOKIES        61             19   
2                 1  CHOCOLATE SANDWICH COOKIES        61             19   
3                 1  CHOCOLATE SANDWICH COOKIES        61             19   
4                 1  CHOCOLATE SANDWICH COOKIES        61             19   
...             ...                         ...       ...            ...   
4545002       49694     BURRITO- STEAK & CHEESE        38              1   
4545003       49694     BURRITO- STEAK & CHEESE        38              1   
4545004       49694     BURRITO- STEAK & CHEESE        38              1   
4545005       49694     BURRITO- STEAK & CHEESE        38              1   
4545006       49694     BURRITO- STEAK & CHEESE        38              1   

         order_id  add_to_cart_order  reordered  
0         1104373                 11          1  
1         1774977                  4          1  
2          652770                 10          0  
3         1000035                  6          1  
4         1679949                  9          0  
...           ...                ...        ...  
4545002   3034802                 10          0  
4545003   3175081                  3          0  
4545004    694132                  2          0  
4545005   2843165                  5          0  
4545006   2077154                 12          0  

[4545007 rows x 7 columns]
merge["reordered_product"] = merge["reordered"] == 1
agrupacion_productos = merge.groupby("product_name")["order_id"].count().reset_index()


top_20_products = agrupacion_productos.sort_values("order_id", ascending=False).head(20)
print(top_20_products)
                   product_name  order_id
3243                     BANANA     66050
3050     BAG OF ORGANIC BANANAS     53297
28651      ORGANIC STRAWBERRIES     37039
25807      ORGANIC BABY SPINACH     33971
27148      ORGANIC HASS AVOCADO     29773
25773           ORGANIC AVOCADO     24689
20042               LARGE LEMON     21495
38474              STRAWBERRIES     20018
20952                     LIMES     19690
29165        ORGANIC WHOLE MILK     19600
28140       ORGANIC RASPBERRIES     19197
29244      ORGANIC YELLOW ONION     15898
26871            ORGANIC GARLIC     15292
29282          ORGANIC ZUCCHINI     14584
25959       ORGANIC BLUEBERRIES     13879
10377            CUCUMBER KIRBY     13675
26852        ORGANIC FUJI APPLE     12544
27405             ORGANIC LEMON     12232
2326   APPLE HONEYCRISP ORGANIC     11993
26998    ORGANIC GRAPE TOMATOES     11781
Escribe aquí tus conclusiones. Los 20 productos más reordenados incluyen alimentos básicos y organicos

[C3] Para cada producto, ¿cuál es la proporción de las veces que se pide y que se vuelve a pedir?
total_pedidos = df_products.groupby('product_id')['product_name'].count()
repeticiones_pedido= df_order_products['reordered'].mean()
tasa_repeticion_pedido= repeticiones_pedido / total_pedidos
print(tasa_repeticion_pedido.head(20).reset_index())
    product_id  product_name
0            1      0.590503
1            2      0.590503
2            3      0.590503
3            4      0.590503
4            5      0.590503
5            6      0.590503
6            7      0.590503
7            8      0.590503
8            9      0.590503
9           10      0.590503
10          11      0.590503
11          12      0.590503
12          13      0.590503
13          14      0.590503
14          15      0.590503
15          16      0.590503
16          17      0.590503
17          18      0.590503
18          19      0.590503
19          20      0.590503
Escribe aquí tus conclusiones

[C4] Para cada cliente, ¿qué proporción de sus productos ya los había pedido?
total_pedidos = df_instacart.groupby('user_id')['order_id'].count()
pedidos_repetidos = df_instacart[df_instacart['order_number'] == 1]['order_id'].count()

proporcion_repetidos= pedidos_repetidos/ total_pedidos

print(proporcion_repetidos.head(20).reset_index())
    user_id      order_id
0         2  14408.500000
1         4  14408.500000
2         5  28817.000000
3         6  14408.500000
4         7  14408.500000
5        10  28817.000000
6        11  14408.500000
7        12  28817.000000
8        13   9605.666667
9        14   7204.250000
10       15   5763.400000
11       16   9605.666667
12       17   4116.714286
13       19  14408.500000
14       20  28817.000000
15       21   9605.666667
16       22  14408.500000
17       23  28817.000000
18       24  28817.000000
19       25  28817.000000
 
Escribe aquí tus conclusiones. La tasa de reordenación de productos también varía según el cliente, con algunos clientes reordenando productos con mayor frecuencia que otros.

[C5] ¿Cuáles son los 20 principales artículos que las personas ponen primero en sus carritos?
print(f"No me pusiste ningun ejemplo, no entiendo que debo modificar")
No me pusiste ningun ejemplo, no entiendo que debo modificar
df_order_products
order_id	product_id	add_to_cart_order	reordered
0	2141543	11440	17	0
1	567889	1560	1	1
2	2261212	26683	1	1
3	491251	8670	35	1
4	2571142	1940	5	1
...	...	...	...	...
4545002	577211	15290	12	1
4545003	1219554	21914	9	0
4545004	692640	47766	4	1
4545005	319435	691	8	1
4545006	1398151	28733	9	0
4545007 rows × 4 columns

df_products
product_id	product_name	aisle_id	department_id
0	1	CHOCOLATE SANDWICH COOKIES	61	19
1	2	ALL-SEASONS SALT	104	13
2	3	ROBUST GOLDEN UNSWEETENED OOLONG TEA	94	7
3	4	SMART ONES CLASSIC FAVORITES MINI RIGATONI WIT...	38	1
4	5	GREEN CHILE ANYTIME SAUCE	5	13
...	...	...	...	...
49689	49690	HIGH PERFORMANCE ENERGY DRINK	64	7
49690	49691	ORIGINAL PANCAKE & WAFFLE MIX	130	14
49691	49692	ORGANIC INSTANT OATMEAL LIGHT MAPLE BROWN SUGAR	130	14
49692	49693	SPRING WATER BODY WASH	127	11
49693	49694	BURRITO- STEAK & CHEESE	38	1
49694 rows × 4 columns

df_agregar_al_carrito = df_order_products.merge(df_products, on="product_id")
primeros_en_carrito = df_agregar_al_carrito[df_agregar_al_carrito['add_to_cart_order'] == 1]
primeros_veinte = primeros_en_carrito.groupby(['product_id', 'product_name'])['product_id'].count().sort_values(ascending=False)

print(primeros_veinte.head(20))
product_id  product_name               
24852       BANANA                         15562
13176       BAG OF ORGANIC BANANAS         11026
27845       ORGANIC WHOLE MILK              4363
21137       ORGANIC STRAWBERRIES            3946
47209       ORGANIC HASS AVOCADO            3390
21903       ORGANIC BABY SPINACH            3336
47766       ORGANIC AVOCADO                 3044
19660       SPRING WATER                    2336
16797       STRAWBERRIES                    2308
27966       ORGANIC RASPBERRIES             2024
44632       SPARKLING WATER GRAPEFRUIT      1914
49235       ORGANIC HALF & HALF             1797
47626       LARGE LEMON                     1737
196         SODA                            1733
38689       ORGANIC REDUCED FAT MILK        1397
26209       LIMES                           1370
12341       HASS AVOCADOS                   1340
5785        ORGANIC REDUCED FAT 2% MILK     1310
27086       HALF & HALF                     1309
43352       RASPBERRIES                     1246
Name: product_id, dtype: int64

CONCLUSION SOBRE EL PROYECTO: Los datos revelan patrones claros en el comportamiento de compra de los usuarios de Instacart, con una mayor actividad por la tarde y los fines de semana.

Los clientes tienden a realizar pedidos pequeños y frecuentes, con una preferencia por productos básicos y artículos de uso diario.

La tasa de reordenación varía según el producto y el cliente, lo que sugiere que Instacart podría utilizar estas tendencias para personalizar las recomendaciones de productos y mejorar la experiencia del usuario.

La información sobre los productos añadidos al principio del carrito puede ser útil para optimizar la colocación de productos en la plataforma y aumentar las ventas.

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/
